// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tl_to_db.proto

// option java_multiple_files = true;
// option java_package = "io.grpc.examples.helloworld";
// option java_outer_classname = "HelloWorldProto";

package tltodb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Greeter_SayHello_FullMethodName = "/tltodb.Greeter/SayHello"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility.
//
// The greeting service definition.
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServer struct{}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}
func (UnimplementedGreeterServer) testEmbeddedByValue()                 {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	// If the following call pancis, it indicates UnimplementedGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tltodb.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tl_to_db.proto",
}

const (
	Thingsly_GetDeviceHistory_FullMethodName                = "/tltodb.Thingsly/GetDeviceHistory"
	Thingsly_GetDeviceHistoryWithPageAndPage_FullMethodName = "/tltodb.Thingsly/GetDeviceHistoryWithPageAndPage"
	Thingsly_GetDeviceAttributesHistory_FullMethodName      = "/tltodb.Thingsly/GetDeviceAttributesHistory"
	Thingsly_GetDeviceAttributesCurrents_FullMethodName     = "/tltodb.Thingsly/GetDeviceAttributesCurrents"
	Thingsly_GetDeviceAttributesCurrentList_FullMethodName  = "/tltodb.Thingsly/GetDeviceAttributesCurrentList"
	Thingsly_GetDeviceKVDataWithNoAggregate_FullMethodName  = "/tltodb.Thingsly/GetDeviceKVDataWithNoAggregate"
	Thingsly_GetDeviceKVDataWithAggregate_FullMethodName    = "/tltodb.Thingsly/GetDeviceKVDataWithAggregate"
)

// ThingslyClient is the client API for Thingsly service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThingslyClient interface {
	// Retrieve historical attribute data for a device
	GetDeviceHistory(ctx context.Context, in *GetDeviceHistoryRequest, opts ...grpc.CallOption) (*GetDeviceHistoryReply, error)
	GetDeviceHistoryWithPageAndPage(ctx context.Context, in *GetDeviceHistoryWithPageAndPageRequest, opts ...grpc.CallOption) (*GetDeviceHistoryWithPageAndPageReply, error)
	GetDeviceAttributesHistory(ctx context.Context, in *GetDeviceAttributesHistoryRequest, opts ...grpc.CallOption) (*GetDeviceAttributesHistoryReply, error)
	// Dictionary form of current data
	GetDeviceAttributesCurrents(ctx context.Context, in *GetDeviceAttributesCurrentsRequest, opts ...grpc.CallOption) (*GetDeviceAttributesCurrentsReply, error)
	// List form of current data
	GetDeviceAttributesCurrentList(ctx context.Context, in *GetDeviceAttributesCurrentListRequest, opts ...grpc.CallOption) (*GetDeviceAttributesCurrentListReply, error)
	GetDeviceKVDataWithNoAggregate(ctx context.Context, in *GetDeviceKVDataWithNoAggregateRequest, opts ...grpc.CallOption) (*GetDeviceKVDataWithNoAggregateReply, error)
	GetDeviceKVDataWithAggregate(ctx context.Context, in *GetDeviceKVDataWithAggregateRequest, opts ...grpc.CallOption) (*GetDeviceKVDataWithAggregateReply, error)
}

type thingslyClient struct {
	cc grpc.ClientConnInterface
}

func NewThingslyClient(cc grpc.ClientConnInterface) ThingslyClient {
	return &thingslyClient{cc}
}

func (c *thingslyClient) GetDeviceHistory(ctx context.Context, in *GetDeviceHistoryRequest, opts ...grpc.CallOption) (*GetDeviceHistoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceHistoryReply)
	err := c.cc.Invoke(ctx, Thingsly_GetDeviceHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingslyClient) GetDeviceHistoryWithPageAndPage(ctx context.Context, in *GetDeviceHistoryWithPageAndPageRequest, opts ...grpc.CallOption) (*GetDeviceHistoryWithPageAndPageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceHistoryWithPageAndPageReply)
	err := c.cc.Invoke(ctx, Thingsly_GetDeviceHistoryWithPageAndPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingslyClient) GetDeviceAttributesHistory(ctx context.Context, in *GetDeviceAttributesHistoryRequest, opts ...grpc.CallOption) (*GetDeviceAttributesHistoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceAttributesHistoryReply)
	err := c.cc.Invoke(ctx, Thingsly_GetDeviceAttributesHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingslyClient) GetDeviceAttributesCurrents(ctx context.Context, in *GetDeviceAttributesCurrentsRequest, opts ...grpc.CallOption) (*GetDeviceAttributesCurrentsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceAttributesCurrentsReply)
	err := c.cc.Invoke(ctx, Thingsly_GetDeviceAttributesCurrents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingslyClient) GetDeviceAttributesCurrentList(ctx context.Context, in *GetDeviceAttributesCurrentListRequest, opts ...grpc.CallOption) (*GetDeviceAttributesCurrentListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceAttributesCurrentListReply)
	err := c.cc.Invoke(ctx, Thingsly_GetDeviceAttributesCurrentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingslyClient) GetDeviceKVDataWithNoAggregate(ctx context.Context, in *GetDeviceKVDataWithNoAggregateRequest, opts ...grpc.CallOption) (*GetDeviceKVDataWithNoAggregateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceKVDataWithNoAggregateReply)
	err := c.cc.Invoke(ctx, Thingsly_GetDeviceKVDataWithNoAggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingslyClient) GetDeviceKVDataWithAggregate(ctx context.Context, in *GetDeviceKVDataWithAggregateRequest, opts ...grpc.CallOption) (*GetDeviceKVDataWithAggregateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceKVDataWithAggregateReply)
	err := c.cc.Invoke(ctx, Thingsly_GetDeviceKVDataWithAggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThingslyServer is the server API for Thingsly service.
// All implementations must embed UnimplementedThingslyServer
// for forward compatibility.
type ThingslyServer interface {
	// Retrieve historical attribute data for a device
	GetDeviceHistory(context.Context, *GetDeviceHistoryRequest) (*GetDeviceHistoryReply, error)
	GetDeviceHistoryWithPageAndPage(context.Context, *GetDeviceHistoryWithPageAndPageRequest) (*GetDeviceHistoryWithPageAndPageReply, error)
	GetDeviceAttributesHistory(context.Context, *GetDeviceAttributesHistoryRequest) (*GetDeviceAttributesHistoryReply, error)
	// Dictionary form of current data
	GetDeviceAttributesCurrents(context.Context, *GetDeviceAttributesCurrentsRequest) (*GetDeviceAttributesCurrentsReply, error)
	// List form of current data
	GetDeviceAttributesCurrentList(context.Context, *GetDeviceAttributesCurrentListRequest) (*GetDeviceAttributesCurrentListReply, error)
	GetDeviceKVDataWithNoAggregate(context.Context, *GetDeviceKVDataWithNoAggregateRequest) (*GetDeviceKVDataWithNoAggregateReply, error)
	GetDeviceKVDataWithAggregate(context.Context, *GetDeviceKVDataWithAggregateRequest) (*GetDeviceKVDataWithAggregateReply, error)
	mustEmbedUnimplementedThingslyServer()
}

// UnimplementedThingslyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThingslyServer struct{}

func (UnimplementedThingslyServer) GetDeviceHistory(context.Context, *GetDeviceHistoryRequest) (*GetDeviceHistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceHistory not implemented")
}
func (UnimplementedThingslyServer) GetDeviceHistoryWithPageAndPage(context.Context, *GetDeviceHistoryWithPageAndPageRequest) (*GetDeviceHistoryWithPageAndPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceHistoryWithPageAndPage not implemented")
}
func (UnimplementedThingslyServer) GetDeviceAttributesHistory(context.Context, *GetDeviceAttributesHistoryRequest) (*GetDeviceAttributesHistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceAttributesHistory not implemented")
}
func (UnimplementedThingslyServer) GetDeviceAttributesCurrents(context.Context, *GetDeviceAttributesCurrentsRequest) (*GetDeviceAttributesCurrentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceAttributesCurrents not implemented")
}
func (UnimplementedThingslyServer) GetDeviceAttributesCurrentList(context.Context, *GetDeviceAttributesCurrentListRequest) (*GetDeviceAttributesCurrentListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceAttributesCurrentList not implemented")
}
func (UnimplementedThingslyServer) GetDeviceKVDataWithNoAggregate(context.Context, *GetDeviceKVDataWithNoAggregateRequest) (*GetDeviceKVDataWithNoAggregateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceKVDataWithNoAggregate not implemented")
}
func (UnimplementedThingslyServer) GetDeviceKVDataWithAggregate(context.Context, *GetDeviceKVDataWithAggregateRequest) (*GetDeviceKVDataWithAggregateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceKVDataWithAggregate not implemented")
}
func (UnimplementedThingslyServer) mustEmbedUnimplementedThingslyServer() {}
func (UnimplementedThingslyServer) testEmbeddedByValue()                  {}

// UnsafeThingslyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThingslyServer will
// result in compilation errors.
type UnsafeThingslyServer interface {
	mustEmbedUnimplementedThingslyServer()
}

func RegisterThingslyServer(s grpc.ServiceRegistrar, srv ThingslyServer) {
	// If the following call pancis, it indicates UnimplementedThingslyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Thingsly_ServiceDesc, srv)
}

func _Thingsly_GetDeviceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingslyServer).GetDeviceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thingsly_GetDeviceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingslyServer).GetDeviceHistory(ctx, req.(*GetDeviceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thingsly_GetDeviceHistoryWithPageAndPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceHistoryWithPageAndPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingslyServer).GetDeviceHistoryWithPageAndPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thingsly_GetDeviceHistoryWithPageAndPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingslyServer).GetDeviceHistoryWithPageAndPage(ctx, req.(*GetDeviceHistoryWithPageAndPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thingsly_GetDeviceAttributesHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceAttributesHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingslyServer).GetDeviceAttributesHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thingsly_GetDeviceAttributesHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingslyServer).GetDeviceAttributesHistory(ctx, req.(*GetDeviceAttributesHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thingsly_GetDeviceAttributesCurrents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceAttributesCurrentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingslyServer).GetDeviceAttributesCurrents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thingsly_GetDeviceAttributesCurrents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingslyServer).GetDeviceAttributesCurrents(ctx, req.(*GetDeviceAttributesCurrentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thingsly_GetDeviceAttributesCurrentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceAttributesCurrentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingslyServer).GetDeviceAttributesCurrentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thingsly_GetDeviceAttributesCurrentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingslyServer).GetDeviceAttributesCurrentList(ctx, req.(*GetDeviceAttributesCurrentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thingsly_GetDeviceKVDataWithNoAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceKVDataWithNoAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingslyServer).GetDeviceKVDataWithNoAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thingsly_GetDeviceKVDataWithNoAggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingslyServer).GetDeviceKVDataWithNoAggregate(ctx, req.(*GetDeviceKVDataWithNoAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thingsly_GetDeviceKVDataWithAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceKVDataWithAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingslyServer).GetDeviceKVDataWithAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thingsly_GetDeviceKVDataWithAggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingslyServer).GetDeviceKVDataWithAggregate(ctx, req.(*GetDeviceKVDataWithAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Thingsly_ServiceDesc is the grpc.ServiceDesc for Thingsly service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thingsly_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tltodb.Thingsly",
	HandlerType: (*ThingslyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceHistory",
			Handler:    _Thingsly_GetDeviceHistory_Handler,
		},
		{
			MethodName: "GetDeviceHistoryWithPageAndPage",
			Handler:    _Thingsly_GetDeviceHistoryWithPageAndPage_Handler,
		},
		{
			MethodName: "GetDeviceAttributesHistory",
			Handler:    _Thingsly_GetDeviceAttributesHistory_Handler,
		},
		{
			MethodName: "GetDeviceAttributesCurrents",
			Handler:    _Thingsly_GetDeviceAttributesCurrents_Handler,
		},
		{
			MethodName: "GetDeviceAttributesCurrentList",
			Handler:    _Thingsly_GetDeviceAttributesCurrentList_Handler,
		},
		{
			MethodName: "GetDeviceKVDataWithNoAggregate",
			Handler:    _Thingsly_GetDeviceKVDataWithNoAggregate_Handler,
		},
		{
			MethodName: "GetDeviceKVDataWithAggregate",
			Handler:    _Thingsly_GetDeviceKVDataWithAggregate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tl_to_db.proto",
}
