# If you need to set configuration items in system variables, use variable names starting with THINGSLY_, for example: THINGSLY_DB_PSQL_DBTYPE for db.psql.dbType

service:
  http:
    host: 0.0.0.0 # Default is localhost
    # host: 103.124.93.210 # Server teacher Tien
    port: 9999 # Default is 9999

log:
  # 0 - Console output, 1 - File output, 2 - Both file and console output
  adapter_type: 0
  # Maximum days to keep log files
  maxdays: 7
  # Log level (panic fatal error warn info debug trace)
  level: debug # Default is info
  # Maximum number of lines in each file
  maxlines: 10000

jwt:
  key: 1hj5b0sp9

db:
  psql:
    host: 127.0.0.1 # Default is localhost
    # host: 47.128.231.67 # Server AWS
    # host: 103.124.93.210 # Server teacher Tien
    port: 5432 # Default is 5432
    # port: 5555 # For gen model code
    dbname: Thingsly
    username: postgres
    password: postgresThingsly
    time_zone: Asia/Ho_Chi_Minh # Default is UTC

    idle_conns: 5 # Maximum number of idle connections in the pool, recommended to be between 5-20% of open_conns
    open_conns: 50 # Maximum number of open connections, TimescaleDB default is 100, considering other services will also use the database, recommended to set this to 50
    # SQL log level (1 - silent 2 - error 3 - warning 4 - info)
    log_level: 4 # Default is 1
    # Slow SQL threshold (milliseconds). Slow SQL will be logged when sqlloglevel is greater than or equal to 3.
    slow_threshold: 200 # Default is 200 milliseconds

  redis:
    addr: 127.0.0.1:6379 # Default is localhost:6379
    # addr: 103.124.93.210:6379 # Server teacher Tien
    # addr: 47.128.231.67:6379 # Server AWS
    db: 1 # Default is 0
    db1: 10 # Default is 10, cannot be 0, used for user device status management
    password: "redis"

grpc:
  tptodb_server: 127.0.0.1:50052
  tptodb_type: NONE # NONE, TSDB

# MQTT services: gmqtt, vernemq
mqtt_server: vernemq

mqtt:
  access_address: 127.0.0.1:1883 # Default is localhost:1883
  # access_address: 103.124.93.210:1883 # Server teacher Tien
  # access_address: 47.128.231.67:1883 # Server AWS
  broker: 127.0.0.1:1883 # Default is localhost:1883
  # broker: 47.128.231.67:1883
  # broker: 103.124.93.210:1883 # Server teacher Tien
  user: root # Default is root
  pass: root # Default is root
  channel_buffer_size: 10000 # Default is 10000
  write_workers: 1 # Message queue insertion threads, default is 10
  # Message quality of service: 0 - message is delivered at most once, it will be lost if the client is unavailable. 1 - message is delivered at least once. 2 - message is delivered exactly once.
  # Below topics are default topics
  telemetry:
    # devices/telemetry/control/{device_number}
    # If sent to protocol plugin, it will be devices/telemetry/control/{device_id}
    publish_topic: devices/telemetry/control/
    subscribe_topic: devices/telemetry
    gateway_subscribe_topic: gateway/telemetry
    # gateway/telemetry/{device_number}/+
    gateway_publish_topic: gateway/telemetry/control/%s
    pool_size: 10 # Message processing thread pool, default is 100
    batch_size: 100 # Default is 100, maximum batch data size to write into the database at once
    qos: 0
  attributes:
    # Subscribe attributes: + position is {message_id}
    subscribe_topic: devices/attributes/+
    # Publish attribute response: devices/attributes/response/{device_number}/{message_id}
    publish_response_topic: devices/attributes/response/
    # Publish set attribute request: devices/attributes/set/{device_number}/{message_id}
    publish_topic: devices/attributes/set/
    # Subscribe to set attribute response: + position is {message_id}
    subscribe_response_topic: devices/attributes/set/response/+
    # Publish get attribute request: devices/attributes/get/{device_number}
    publish_get_topic: devices/attributes/get/

    # Device attribute reporting: gateway/attributes/{message_id}
    gateway_subscribe_topic: gateway/attributes/+
    # Subscribe to platform attribute response: gateway/attributes/response/{device_number}/+
    gateway_publish_response_topic: gateway/attributes/response/%s/%s
    # Platform sets device attribute: gateway/attributes/set/{device_number}/+
    gateway_publish_topic: gateway/attributes/set/%s/%s
    # Platform sets attribute device response: gateway/attributes/set/response/{message_id}
    gateway_subscribe_response_topic: gateway/attributes/set/response/+
    # Platform sends request to get attribute: gateway/attributes/get/{device_number}
    gateway_publish_get_topic: gateway/attributes/get/%s

    qos: 1
  commands:
    # devices/command/{device_number}/{message_id}
    publish_topic: devices/command/
    subscribe_topic: devices/command/response/+
    # Device receives command response: gateway/command/response/{message_id}
    gateway_subscribe_topic: gateway/command/response/+
    # Send command: gateway/command/{device_number}/+
    gateway_publish_topic: gateway/command/%s/%s
    # Test
    # gateway_publish_topic: devices/command/%s/%s
    qos: 1
  events:
    # Subscribe to events: + position is message_id
    subscribe_topic: devices/event/+
    # Publish event response: devices/event/response/{device_number}/{message_id}
    publish_topic: devices/event/response/

    # Device reports event: gateway/event/{message_id}
    gateway_subscribe_topic: gateway/event/+
    # Platform receives event response: gateway/event/response/{device_number}/+
    gateway_publish_topic: gateway/event/response/%s/%s

    qos: 1
  ota:
    # OTA upgrade package message push: ota/devices/infrom/{device_number}
    publish_topic: ota/devices/infrom/
    subscribe_topic: ota/devices/progress
    qos: 1

mqtts:
  broker: 127.0.0.1:8883
  user: root
  pass: root
  caPath: ./conf/certificate/ca.crt
  crtPath: ./conf/certificate/client.crt
  keyPath: ./conf/certificate/client.key

automation_task_confg:
  once_task_limit: 100
  periodic_task_limit: 100

ota:
  # Push OTA upgrade package download address to device side
  download_address: http://127.0.0.1:9999

classified-protect:
  # Number of consecutive login failures that will lock the account, -1 means no limit, can try to log in indefinitely
  login-max-fail-times: -1
  # Consecutive login failure lock time (in seconds), -1 means no lock
  login-fail-locked-seconds: 300

# Session settings
session:
  # Session timeout (in minutes)
  timeout: 6000
  # Optional: whether to reset the timeout on each request
  reset_on_request: false

smtp:
  host: "smtp.gmail.com"
  port: 465
  username: "captainnemot1k60@gmail.com"
  password: "fpqu rcfv hnze zuck"
  from_email: "captainnemot1k60@gmail.com"
  ssl: true
